git clone https://github.com/42Paris/minilibx-linux
cd minilibx-linux
apt-get install libxext-dev libxrandr-dev libx11-dev libbsd-dev libssl-dev
mv minilibx-linux/man/man1 to /usr/local/man/
mv minilibx-linux/libmlx.a to /usr/local/lib/
mv minilibx-linux/mlx.h to /usr/local/include/


https://harm-smits.github.io/42docs/libs/minilibx/getting_started.html#installation

https://github.com/VBrazhnik/FdF/tree/master

-lmlx -lX11 -lXext -lm

https://42-cursus.gitbook.io/guide/
https://github.com/m4nnb3ll/fdf
https://github.com/suiramdev/42-fdf/
https://github.com/mbdanielcrespo/ft_fdf
https://github.com/thebrisly/42-Cursus-Piscine/tree/master/FdF
https://github.com/Laendrun/42-fdf
https://github.com/duarte3333/FdF_Wireframe_model
https://youtu.be/eoXn6nwV694?si=PWu8RD06YRaXronk
https://www.youtube.com/watch?v=go1qrWFw_bs&ab_channel=CodingMath

 * @code
 * int interpolate(int start, int end, float ratio);
 * @endcond
 * @brief Calculates linear interpolation between two values.
 * @param start Starting integer value for interpolation.
 * @param end Ending integer value for interpolation.
 * @param ratio Floating-point value between 0.0 and 1.0 indicating interpolation ratio.
 * @return (int) Interpolated Value.
 */
int	interpolate(int start, int end, float ratio)
{
	return ((int)(start + ((end - start) * ratio)));
}



//debug functions, remove before submitting
void	print_t_points(t_point **grid, int height, int width)
{
	int y, x;
	if (!grid || !*grid)
		return ;
	y = 0;
	while (y < height)
	{
		x = 0;
		while (x < width)
		{
			printf("%-3d ", grid[y][x].z);
			x++;
		}
		printf("\n");
		y++;
	}
	printf("\n");
}


void print_t_points_info(t_point **grid, int height, int width) {
    printf("Grid Points (x, y, z):\n");
    printf("----------------------------------------\n");

    for (int y = 0; y < height; y++) {
        for (int x = 0; x < width; x++) {
            printf("| (%3d, %3d, %3d) ", grid[y][x].x, grid[y][x].y, grid[y][x].z);
            // printf("| Color: %s ", grid[y][x].c);
        }
        printf("|\n");
        printf("----------------------------------------\n");
    }
    printf("\n");
}

//mlx_loop_hook(&instance->mlx_ser, &handle_key, &instance);
//mlx_hook(instance->mlx_win, KeyPress, KeyPressMask, handle_key, instance);

void exec_dda(t_session *instance, t_dda *params, t_color *color, int step_count)
{
	float step_ratio;
	int pixel_color;

	if (step_count > params->step)
		return ;
	step_ratio = (float)step_count / params->step;
	pixel_color = create_rgb(step_ratio, color->start, color->end);
	my_mlx_pixel_put(&instance->mlx_img,
		round(params->current_x), round(params->current_y), pixel_color);
	params->current_x += params->x_inc;
	params->current_y += params->y_inc;
	exec_dda(instance, params, color, step_count + 1);
}

void put_pixels(t_session *instance, t_point *start, t_point *end)
{
	t_dda params;
	t_color color;

	init_dda(&params, start, end);
	init_color(&color, start, end);
	exec_dda(instance, &params, &color, 0);
}
